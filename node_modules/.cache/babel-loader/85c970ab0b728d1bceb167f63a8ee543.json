{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport { GChart } from \"vue-google-charts\";\nimport PartyInfo from \"../components/PartyInfo.vue\";\n//import cheerio from \"cheerio\";\nimport axios from \"axios\";\nexport default {\n  name: \"OpinionGraph\",\n  components: {\n    GChart,\n    PartyInfo\n  },\n  props: {\n    currentView: String\n  },\n  data() {\n    let dataList = null;\n    const map = new Map();\n    map.set(\"CPC\", 35);\n    map.set(\"LPC\", 31);\n    map.set(\"NDP\", 19);\n    map.set(\"BQ\", 8);\n    map.set(\"PPC\", 2);\n    map.set(\"GPC\", 4);\n    return {\n      data: dataList,\n      partyList: [\"CPC\", \"LPC\", \"NDP\", \"BQ\", \"PPC\", \"GPC\"],\n      partyNums: map,\n      options: {\n        aggregationTarget: \"category\",\n        backgroundColor: \"#e8e8e8\",\n        colors: [\"#0F2D52\", \"#e6693e\", \"#D71921\", \"#F58220\", \"#00A7EC\", \"#442D7B\", \"#3C9B35\"],\n        focusTarget: \"category\",\n        // animation: {\n        //   startup: true,\n        //   duration: 1000,\n        //   easing: \"out\",\n        // },\n        boxStyle: {\n          stroke: \"#888\",\n          strokeWidth: 1,\n          rx: 5,\n          ry: 5\n        },\n        annotations: {\n          style: \"line\"\n        },\n        curveType: \"function\",\n        chart: {\n          title: \"Federal Polls\",\n          subtitle: \"In percentage\"\n        },\n        width: 1000,\n        height: 400\n      }\n    };\n  },\n  mounted() {\n    axios.get(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSHdxj1KPFMHP5gT1ybNfd_-N_7QikiUQ1zMKJgGb4xZjwPY4DcRE6xjWHlWqgbhawjk8ZO6I52MakV/pubhtml\").then(response => this.data = this.parseData(response.data));\n  },\n  methods: {\n    parseData(data) {\n      var returnData = [[\"Day\", \"CPC\", \"LPC\", \"NDP\", \"BQ\", \"PPC\", \"GPC\"]];\n      var dataCap = returnData[0].length;\n      var indexCounter = 0;\n      data = data.substring(data.indexOf(\"Mapoll : Federal\"));\n      console.log(\"novo\");\n      var table = data.split(/<.*?>/);\n      for (var item of table) {\n        if (!item.includes(\"/\") && !item.length == 0) {\n          if (item.charAt(0) == \"[\" && item.charAt(item.length - 1) == \"]\") {\n            indexCounter = 0;\n            var newArray = new Array();\n            newArray.push(table[table.indexOf(item) - 2]);\n            returnData.push(newArray);\n            console.log(returnData);\n          } else if (indexCounter < dataCap - 1 && returnData.length > 1) {\n            returnData[returnData.length - 1].push(this.toInt(item));\n            indexCounter++;\n          }\n        }\n      }\n      var firstRow = returnData.shift();\n      returnData = returnData.reverse();\n      returnData.unshift(firstRow);\n      console.log(returnData);\n      return returnData;\n      //this.dataList = returnData;\n    },\n\n    toInt(value) {\n      if (value.includes(\"*\")) value = value.substring(1, value.length - 1);\n      return parseInt(value);\n    }\n  }\n};","map":{"version":3,"mappings":";;AAiBA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EACA;EACAC;IACAC;EACA;EACAC;IACA;IACA;IAEAC;IACAA;IACAA;IACAA;IACAA;IACAA;IAEA;MACAD;MACAE;MACAC;MACAC;QACAC;QACAC;QACAC,SACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA;QACAC;QACA;QACA;QACA;QACA;QACA;QACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACAC;UACAC;QACA;QACAC;QACAC;UACAC;UACAC;QACA;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC,MACAC,IACA,0IACA,CACAC;EACA;EACAC;IACAC;MACA;MACA;MACA;MACA3B;MACA4B;MACA;MACA;QACA;UACA;YACAC;YACA;YACAC;YACAC;YACAH;UACA;YACAG;YACAF;UACA;QACA;MACA;MACA;MACAE;MACAA;MACAH;MACA;MACA;IACA;;IACAI;MACA;MACA;IACA;EACA;AACA","names":["name","components","GChart","PartyInfo","props","currentView","data","map","partyList","partyNums","options","aggregationTarget","backgroundColor","colors","focusTarget","boxStyle","stroke","strokeWidth","rx","ry","annotations","style","curveType","chart","title","subtitle","width","height","mounted","axios","get","then","methods","parseData","console","indexCounter","newArray","returnData","toInt"],"sourceRoot":"src/components","sources":["OpinionGraph.vue"],"sourcesContent":["<template>\n  <div>\n    <div>{{ currentView }} opinion polls</div>\n    <div class=\"partyInfoBox\">\n      <PartyInfo\n        v-for=\"party of partyList\"\n        :party=\"party\"\n        :currentView=\"currentView\"\n        :partyNum=\"partyNums.get(party)\"\n        :max=\"Math.max(...partyNums.values())\"\n        :key=\"party\"\n      />\n    </div>\n    <GChart type=\"LineChart\" :options=\"options\" :data=\"data\" />\n  </div>\n</template>\n<script>\nimport { GChart } from \"vue-google-charts\";\nimport PartyInfo from \"../components/PartyInfo.vue\";\n//import cheerio from \"cheerio\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"OpinionGraph\",\n  components: {\n    GChart,\n    PartyInfo,\n  },\n  props: {\n    currentView: String,\n  },\n  data() {\n    let dataList = null;\n    const map = new Map();\n\n    map.set(\"CPC\", 35);\n    map.set(\"LPC\", 31);\n    map.set(\"NDP\", 19);\n    map.set(\"BQ\", 8);\n    map.set(\"PPC\", 2);\n    map.set(\"GPC\", 4);\n\n    return {\n      data: dataList,\n      partyList: [\"CPC\", \"LPC\", \"NDP\", \"BQ\", \"PPC\", \"GPC\"],\n      partyNums: map,\n      options: {\n        aggregationTarget: \"category\",\n        backgroundColor: \"#e8e8e8\",\n        colors: [\n          \"#0F2D52\",\n          \"#e6693e\",\n          \"#D71921\",\n          \"#F58220\",\n          \"#00A7EC\",\n          \"#442D7B\",\n          \"#3C9B35\",\n        ],\n        focusTarget: \"category\",\n        // animation: {\n        //   startup: true,\n        //   duration: 1000,\n        //   easing: \"out\",\n        // },\n        boxStyle: {\n          stroke: \"#888\",\n          strokeWidth: 1,\n          rx: 5,\n          ry: 5,\n        },\n        annotations: {\n          style: \"line\",\n        },\n        curveType: \"function\",\n        chart: {\n          title: \"Federal Polls\",\n          subtitle: \"In percentage\",\n        },\n        width: 1000,\n        height: 400,\n      },\n    };\n  },\n  mounted() {\n    axios\n      .get(\n        \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSHdxj1KPFMHP5gT1ybNfd_-N_7QikiUQ1zMKJgGb4xZjwPY4DcRE6xjWHlWqgbhawjk8ZO6I52MakV/pubhtml\"\n      )\n      .then((response) => (this.data = this.parseData(response.data)));\n  },\n  methods: {\n    parseData(data) {\n      var returnData = [[\"Day\", \"CPC\", \"LPC\", \"NDP\", \"BQ\", \"PPC\", \"GPC\"]];\n      var dataCap = returnData[0].length;\n      var indexCounter = 0;\n      data = data.substring(data.indexOf(\"Mapoll : Federal\"));\n      console.log(\"novo\");\n      var table = data.split(/<.*?>/);\n      for (var item of table) {\n        if (!item.includes(\"/\") && !item.length == 0) {\n          if (item.charAt(0) == \"[\" && item.charAt(item.length - 1) == \"]\") {\n            indexCounter = 0;\n            var newArray = new Array();\n            newArray.push(table[table.indexOf(item) - 2]);\n            returnData.push(newArray);\n            console.log(returnData);\n          } else if (indexCounter < dataCap - 1 && returnData.length > 1) {\n            returnData[returnData.length - 1].push(this.toInt(item));\n            indexCounter++;\n          }\n        }\n      }\n      var firstRow = returnData.shift();\n      returnData = returnData.reverse();\n      returnData.unshift(firstRow);\n      console.log(returnData);\n      return returnData;\n      //this.dataList = returnData;\n    },\n    toInt(value) {\n      if (value.includes(\"*\")) value = value.substring(1, value.length - 1);\n      return parseInt(value);\n    },\n  },\n};\n</script>\n<style scoped>\n.partyInfoBox {\n  display: flex;\n  flex-wrap: wrap;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}