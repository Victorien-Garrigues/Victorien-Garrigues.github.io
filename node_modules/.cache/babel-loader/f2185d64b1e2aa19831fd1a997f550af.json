{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { GChart } from \"vue-google-charts\";\nimport PartyInfo from \"../components/PartyInfo.vue\";\nimport cheerio from \"cheerio\";\nimport axios from \"axios\";\nexport default {\n  name: \"OpinionGraph\",\n  components: {\n    GChart,\n    PartyInfo\n  },\n  props: {\n    currentView: String\n  },\n  methods: {\n    getWebsiteData() {\n      let self = this;\n      let url = \"https://www.msn.com/en-au?AR=1\"; // url we get data from\n      let dataArray = []; // we put data in this array\n      // GET request for remote image in node.js\n      axios({\n        method: \"get\",\n        url: url\n      }).then(function (response) {\n        let html = response.data;\n        let $ = cheerio.load(html);\n        $(\"ul.tertiary li\").each(function () {\n          const title = $(this).find(\"h3\").attr(\"aria-label\");\n          const image = $(this).find(\"img\").attr(\"src\");\n\n          // putting data in array.\n\n          dataArray.push({\n            title: title,\n            image: image\n          });\n        });\n        self.lastestArticles = dataArray; // Here we assign value to vuejs variable\n\n        console.log(dataArray);\n      });\n    }\n  },\n  data() {\n    this.getWebsiteData();\n    let dataList = [[\"Day\", \"CPC\", \"LPC\", \"NDP\", \"BQ\", \"PPC\", \"GPC\"], [1, 35, 30, 20, 7, 3, 3], [2, 37, 30, 20, 7, 1, 3], [3, 40.8, 32.7, 12.4, 5.2, 3.4, 2.6], [4, 33, 29, 23, 6, 2, 5], [5, 33, 22, 21, 6, 2, 5], [6, 33, 31, 21, 8, 2, 3], [7, 35, 34, 18, 6, 3, 5]];\n    let partyList = [];\n    let partyNums = new Map();\n    for (let p of dataList[0]) {\n      if (p !== \"Day\" && !partyList.includes(p)) {\n        partyList.push(p);\n        partyNums.set(p, dataList[dataList.length - 1][dataList[0].indexOf(p)]);\n      }\n    }\n    return {\n      data: dataList,\n      partyList: partyList,\n      partyNums: partyNums,\n      options: {\n        backgroundColor: \"#e8e8e8\",\n        focusTarget: \"category\",\n        animation: {\n          duration: 1000,\n          easing: \"out\"\n        },\n        curveType: \"function\",\n        chart: {\n          title: \"Federal Polls\",\n          subtitle: \"In percentage\"\n        },\n        width: 1000,\n        height: 400\n      }\n    };\n  }\n};","map":{"version":3,"mappings":";AAiBA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACAC;IACAC;EACA;EACAC;IACAC;EACA;EACAC;IACAC;MACA;MACA;MACA;MACA;MACAC;QACAC;QACAC;MACA;QACA;QAEA;QAEAC;UACA;UACA;;UAEA;;UAEAC;YACAC;YACAC;UACA;QACA;QAEAC;;QAEAC;MACA;IACA;EACA;EACAC;IACA;IAEA,gBACA,kDACA,0BACA,0BACA,sCACA,0BACA,0BACA,0BACA,yBACA;IACA;IACA;IACA;MACA;QACAC;QACAC;MACA;IACA;IAEA;MACAF;MACAC;MACAC;MACAC;QACAC;QACAC;QACAC;UACAC;UACAC;QACA;QACAC;QACAC;UACAd;UACAe;QACA;QACAC;QACAC;MACA;IACA;EACA;AACA","names":["name","components","GChart","PartyInfo","props","currentView","methods","getWebsiteData","axios","method","url","$","dataArray","title","image","self","console","data","partyList","partyNums","options","backgroundColor","focusTarget","animation","duration","easing","curveType","chart","subtitle","width","height"],"sourceRoot":"src/components","sources":["OpinionGraph.vue"],"sourcesContent":["<template>\n  <div>\n    <div>{{ currentView }} opinion polls</div>\n    <div class=\"partyInfoBox\">\n      <PartyInfo\n        v-for=\"party of partyList\"\n        :party=\"party\"\n        :currentView=\"currentView\"\n        :partyNum=\"partyNums.get(party)\"\n        :max=\"Math.max(...partyNums.values())\"\n        :key=\"party\"\n      />\n    </div>\n    <GChart type=\"LineChart\" :options=\"options\" :data=\"data\" />\n  </div>\n</template>\n<script>\nimport { GChart } from \"vue-google-charts\";\nimport PartyInfo from \"../components/PartyInfo.vue\";\nimport cheerio from \"cheerio\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"OpinionGraph\",\n  components: {\n    GChart,\n    PartyInfo,\n  },\n  props: {\n    currentView: String,\n  },\n  methods: {\n    getWebsiteData() {\n      let self = this;\n      let url = \"https://www.msn.com/en-au?AR=1\"; // url we get data from\n      let dataArray = []; // we put data in this array\n      // GET request for remote image in node.js\n      axios({\n        method: \"get\",\n        url: url,\n      }).then(function (response) {\n        let html = response.data;\n\n        let $ = cheerio.load(html);\n\n        $(\"ul.tertiary li\").each(function () {\n          const title = $(this).find(\"h3\").attr(\"aria-label\");\n          const image = $(this).find(\"img\").attr(\"src\");\n\n          // putting data in array.\n\n          dataArray.push({\n            title: title,\n            image: image,\n          });\n        });\n\n        self.lastestArticles = dataArray; // Here we assign value to vuejs variable\n\n        console.log(dataArray);\n      });\n    },\n  },\n  data() {\n    this.getWebsiteData();\n\n    let dataList = [\n      [\"Day\", \"CPC\", \"LPC\", \"NDP\", \"BQ\", \"PPC\", \"GPC\"],\n      [1, 35, 30, 20, 7, 3, 3],\n      [2, 37, 30, 20, 7, 1, 3],\n      [3, 40.8, 32.7, 12.4, 5.2, 3.4, 2.6],\n      [4, 33, 29, 23, 6, 2, 5],\n      [5, 33, 22, 21, 6, 2, 5],\n      [6, 33, 31, 21, 8, 2, 3],\n      [7, 35, 34, 18, 6, 3, 5],\n    ];\n    let partyList = [];\n    let partyNums = new Map();\n    for (let p of dataList[0]) {\n      if (p !== \"Day\" && !partyList.includes(p)) {\n        partyList.push(p);\n        partyNums.set(p, dataList[dataList.length - 1][dataList[0].indexOf(p)]);\n      }\n    }\n\n    return {\n      data: dataList,\n      partyList: partyList,\n      partyNums: partyNums,\n      options: {\n        backgroundColor: \"#e8e8e8\",\n        focusTarget: \"category\",\n        animation: {\n          duration: 1000,\n          easing: \"out\",\n        },\n        curveType: \"function\",\n        chart: {\n          title: \"Federal Polls\",\n          subtitle: \"In percentage\",\n        },\n        width: 1000,\n        height: 400,\n      },\n    };\n  },\n};\n</script>\n<style scoped>\n.partyInfoBox {\n  display: flex;\n  flex-wrap: wrap;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}