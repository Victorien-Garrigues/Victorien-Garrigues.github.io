{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { GChart } from \"vue-google-charts\";\nimport PartyInfo from \"../components/PartyInfo.vue\";\n//import cheerio from \"cheerio\";\nimport axios from \"axios\";\nexport default {\n  name: \"OpinionGraph\",\n  components: {\n    // GChart,\n    PartyInfo\n  },\n  props: {\n    currentView: String\n  },\n  data() {\n    let dataList = null;\n    const map = new Map();\n    map.set(\"CPC\", 35);\n    map.set(\"LPC\", 31);\n    map.set(\"NDP\", 19);\n    map.set(\"BQ\", 8);\n    map.set(\"PPC\", 2);\n    map.set(\"GPC\", 4);\n    return {\n      data: dataList,\n      partyList: [\"CPC\", \"LPC\", \"NDP\", \"BQ\", \"PPC\", \"GPC\"],\n      partyNums: map,\n      options: {\n        interpolateNulls: true,\n        aggregationTarget: \"category\",\n        backgroundColor: \"#e8e8e8\",\n        focusTarget: \"category\",\n        series: {\n          0: {\n            color: \"#0F2D52\"\n          },\n          1: {\n            color: \"#D71921\"\n          },\n          2: {\n            color: \"#F58220\"\n          },\n          3: {\n            color: \"#00A7EC\"\n          },\n          4: {\n            color: \"#442D7B\"\n          },\n          5: {\n            color: \"#3C9B35\"\n          }\n        },\n        boxStyle: {\n          stroke: \"#888\",\n          strokeWidth: 1,\n          rx: 5,\n          ry: 5\n        },\n        legend: {\n          position: \"none\"\n        },\n        hAxis: {\n          textPosition: \"none\"\n        },\n        annotations: {\n          style: \"line\"\n        },\n        curveType: \"function\",\n        chart: {\n          title: \"Federal Polls\",\n          subtitle: \"In percentage\"\n        },\n        width: 1000,\n        height: 600\n      }\n    };\n  },\n  mounted() {\n    axios.get(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSHdxj1KPFMHP5gT1ybNfd_-N_7QikiUQ1zMKJgGb4xZjwPY4DcRE6xjWHlWqgbhawjk8ZO6I52MakV/pubhtml?gid=1804583268&single=true\").then(response => this.data = this.parseData(response.data));\n    //.then((response) => (this.data = this.parseImg(response.data)));\n  },\n\n  methods: {\n    parseData(data) {\n      //console.log(data);\n      //var returnData = [[\"CPC\", \"LPC\", \"NDP\", \"BQ\", \"PPC\", \"GPC\"]];\n      var returnData = [];\n      // var dataCap = returnData[0].length;\n      // var indexCounter = 0;\n      data = data.substring(data.indexOf(\"Mapoll : ExportTable\"));\n      var table = data.split(/<.*?>/);\n      var step = 0;\n      for (var item of table) {\n        if (item == \"Published by\") {\n          console.log(returnData);\n          return returnData;\n        }\n        if (!item.length == 0) {\n          if (item == \"Party\" || item == \"Poll\" || item == \"Seat\" || item == \"-low\" || item == \"-high\") {\n            if (step > 0) {\n              returnData[step - 1].pop();\n            }\n            returnData.push([]);\n            step++;\n          } else if (step > 0) {\n            returnData[step - 1].push(item);\n          }\n        }\n        // if (!item.includes(\"/\") && !item.length == 0) {\n        //   if (item.charAt(0) == \"[\" && item.charAt(item.length - 1) == \"]\") {\n        //     indexCounter = 0;\n        //     var newArray = new Array();\n        //     newArray.push(table[table.indexOf(item) - 2]);\n        //     returnData.push(newArray);\n        //     console.log(returnData);\n        //   } else if (indexCounter < dataCap - 1 && returnData.length > 1) {\n        //     returnData[returnData.length - 1].push(this.toInt(item));\n        //     indexCounter++;\n        //   }\n        // }\n      }\n      // var firstRow = returnData.shift();\n      // returnData = returnData.reverse();\n      // returnData.unshift(firstRow);\n      // console.log(returnData);\n      // return returnData;\n      // this.dataList = returnData;\n      console.log(returnData);\n      return returnData;\n    },\n    toInt(value) {\n      if (value.includes(\"*\")) value = value.substring(1, value.length - 1);\n      return parseInt(value);\n    },\n    parseImg(data) {\n      console.log(data);\n      return null;\n    }\n  }\n};","map":{"version":3,"mappings":";AAsCA;AACA;AACA;AACA;AAEA;EACAA;EACAC;IACA;IACAC;EACA;EACAC;IACAC;EACA;EACAC;IACA;IACA;IAEAC;IACAA;IACAA;IACAA;IACAA;IACAA;IAEA;MACAD;MACAE;MACAC;MACAC;QACAC;QACAC;QACAC;QACAC;QACAC;UACA;YAAAC;UAAA;UACA;YAAAA;UAAA;UACA;YAAAA;UAAA;UACA;YAAAA;UAAA;UACA;YAAAA;UAAA;UACA;YAAAA;UAAA;QACA;QACAC;UACAC;UACAC;UACAC;UACAC;QACA;QACAC;UAAAC;QAAA;QACAC;UAAAC;QAAA;QACAC;UACAC;QACA;QACAC;QACAC;UACAC;UACAC;QACA;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAC,MACAC,IACA,qKACA,CACAC;IACA;EACA;;EACAC;IACAC;MACA;MACA;MACA;MACA;MACA;MACAjC;MACA;MACA;MACA;QACA;UACAkC;UACA;QACA;QACA;UACA,IACAC,mBACAA,kBACAA,kBACAA,kBACAA,iBACA;YACA;cACAC;YACA;YACAA;YACAC;UACA;YACAD;UACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAF;MACA;IACA;IACAI;MACA;MACA;IACA;IACAC;MACAL;MACA;IACA;EACA;AACA","names":["name","components","PartyInfo","props","currentView","data","map","partyList","partyNums","options","interpolateNulls","aggregationTarget","backgroundColor","focusTarget","series","color","boxStyle","stroke","strokeWidth","rx","ry","legend","position","hAxis","textPosition","annotations","style","curveType","chart","title","subtitle","width","height","mounted","axios","get","then","methods","parseData","console","item","returnData","step","toInt","parseImg"],"sourceRoot":"src/components","sources":["OpinionGraph.vue"],"sourcesContent":["<template>\n  <div>\n    <div>{{ currentView }} opinion polls</div>\n    <div class=\"partyInfoBox\">\n      <PartyInfo\n        v-for=\"party of partyList\"\n        :party=\"party\"\n        :currentView=\"currentView\"\n        :partyNum=\"partyNums.get(party)\"\n        :max=\"Math.max(...partyNums.values())\"\n        :key=\"party\"\n      />\n    </div>\n    <div class=\"chartBox scrollChart\">\n      <div class=\"smallTitle\" style=\"width: 100%\">\n        Opinion polls since last election\n      </div>\n      <iframe\n        width=\"966\"\n        height=\"724\"\n        seamless\n        frameborder=\"0\"\n        scrolling=\"no\"\n        src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSHdxj1KPFMHP5gT1ybNfd_-N_7QikiUQ1zMKJgGb4xZjwPY4DcRE6xjWHlWqgbhawjk8ZO6I52MakV/pubchart?oid=1682798475&amp;format=interactive\"\n      ></iframe>\n      <!-- <iframe\n        width=\"742\"\n        height=\"556\"\n        seamless\n        frameborder=\"0\"\n        scrolling=\"no\"\n        src=\"https://docs.google.com/spreadsheets/d/e/2PACX-1vSHdxj1KPFMHP5gT1ybNfd_-N_7QikiUQ1zMKJgGb4xZjwPY4DcRE6xjWHlWqgbhawjk8ZO6I52MakV/pubchart?oid=1685398086&amp;format=interactive\"\n      ></iframe> -->\n    </div>\n    <!-- <GChart type=\"LineChart\" :options=\"options\" :data=\"data\" /> -->\n  </div>\n</template>\n<script>\n// import { GChart } from \"vue-google-charts\";\nimport PartyInfo from \"../components/PartyInfo.vue\";\n//import cheerio from \"cheerio\";\nimport axios from \"axios\";\n\nexport default {\n  name: \"OpinionGraph\",\n  components: {\n    // GChart,\n    PartyInfo,\n  },\n  props: {\n    currentView: String,\n  },\n  data() {\n    let dataList = null;\n    const map = new Map();\n\n    map.set(\"CPC\", 35);\n    map.set(\"LPC\", 31);\n    map.set(\"NDP\", 19);\n    map.set(\"BQ\", 8);\n    map.set(\"PPC\", 2);\n    map.set(\"GPC\", 4);\n\n    return {\n      data: dataList,\n      partyList: [\"CPC\", \"LPC\", \"NDP\", \"BQ\", \"PPC\", \"GPC\"],\n      partyNums: map,\n      options: {\n        interpolateNulls: true,\n        aggregationTarget: \"category\",\n        backgroundColor: \"#e8e8e8\",\n        focusTarget: \"category\",\n        series: {\n          0: { color: \"#0F2D52\" },\n          1: { color: \"#D71921\" },\n          2: { color: \"#F58220\" },\n          3: { color: \"#00A7EC\" },\n          4: { color: \"#442D7B\" },\n          5: { color: \"#3C9B35\" },\n        },\n        boxStyle: {\n          stroke: \"#888\",\n          strokeWidth: 1,\n          rx: 5,\n          ry: 5,\n        },\n        legend: { position: \"none\" },\n        hAxis: { textPosition: \"none\" },\n        annotations: {\n          style: \"line\",\n        },\n        curveType: \"function\",\n        chart: {\n          title: \"Federal Polls\",\n          subtitle: \"In percentage\",\n        },\n        width: 1000,\n        height: 600,\n      },\n    };\n  },\n  mounted() {\n    axios\n      .get(\n        \"https://docs.google.com/spreadsheets/d/e/2PACX-1vSHdxj1KPFMHP5gT1ybNfd_-N_7QikiUQ1zMKJgGb4xZjwPY4DcRE6xjWHlWqgbhawjk8ZO6I52MakV/pubhtml?gid=1804583268&single=true\"\n      )\n      .then((response) => (this.data = this.parseData(response.data)));\n    //.then((response) => (this.data = this.parseImg(response.data)));\n  },\n  methods: {\n    parseData(data) {\n      //console.log(data);\n      //var returnData = [[\"CPC\", \"LPC\", \"NDP\", \"BQ\", \"PPC\", \"GPC\"]];\n      var returnData = [];\n      // var dataCap = returnData[0].length;\n      // var indexCounter = 0;\n      data = data.substring(data.indexOf(\"Mapoll : ExportTable\"));\n      var table = data.split(/<.*?>/);\n      var step = 0;\n      for (var item of table) {\n        if (item == \"Published by\") {\n          console.log(returnData);\n          return returnData;\n        }\n        if (!item.length == 0) {\n          if (\n            item == \"Party\" ||\n            item == \"Poll\" ||\n            item == \"Seat\" ||\n            item == \"-low\" ||\n            item == \"-high\"\n          ) {\n            if (step > 0) {\n              returnData[step - 1].pop();\n            }\n            returnData.push([]);\n            step++;\n          } else if (step > 0) {\n            returnData[step - 1].push(item);\n          }\n        }\n        // if (!item.includes(\"/\") && !item.length == 0) {\n        //   if (item.charAt(0) == \"[\" && item.charAt(item.length - 1) == \"]\") {\n        //     indexCounter = 0;\n        //     var newArray = new Array();\n        //     newArray.push(table[table.indexOf(item) - 2]);\n        //     returnData.push(newArray);\n        //     console.log(returnData);\n        //   } else if (indexCounter < dataCap - 1 && returnData.length > 1) {\n        //     returnData[returnData.length - 1].push(this.toInt(item));\n        //     indexCounter++;\n        //   }\n        // }\n      }\n      // var firstRow = returnData.shift();\n      // returnData = returnData.reverse();\n      // returnData.unshift(firstRow);\n      // console.log(returnData);\n      // return returnData;\n      // this.dataList = returnData;\n      console.log(returnData);\n      return returnData;\n    },\n    toInt(value) {\n      if (value.includes(\"*\")) value = value.substring(1, value.length - 1);\n      return parseInt(value);\n    },\n    parseImg(data) {\n      console.log(data);\n      return null;\n    },\n  },\n};\n</script>\n<style scoped>\n.partyInfoBox {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n}\n.smallTitle {\n  color: #2c3e50;\n  font-size: 30px;\n  font-weight: bold;\n  font-family: Merriweather, serif;\n  margin-top: 10px;\n}\n/* .scrollChart {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  overflow: auto;\n} */\n#oGraph {\n  display: flex;\n  align-items: flex-end;\n  justify-content: flex-end;\n  width: 966px;\n}\n@media only screen and (max-width: 1060px) {\n  #oGraph {\n    width: 788px;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}